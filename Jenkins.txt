


sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt update

sudo apt install fontconfig openjdk-17-jre

sudo apt-get install jenkins

sudo systemctl enable jenkins

/var/lib/jenkins/secrets/initialAdminPassword
21e6cf4ed0af43cb879775a09a184784

if below error persist please update linux(sudo apt update)
	ubuntu@ip-172-31-20-88:~$ sudo apt-get install jenkins
	Reading package lists... Done
	Building dependency tree... Done
	Reading state information... Done
	Package jenkins is not available, but is referred to by another package.
	This may mean that the package is missing, has been obsoleted, or
	is only available from another source

	E: Package 'jenkins' has no installation candidate
	
	sudo apt-get install jenkins

Update Firewall to enable Jenkins service
	sudo ufw enable
	sudo ufw allow 8080 # whatever port number you like
	sudo apt-get install jenkins
	
Check the status of your port:
	sudo ufw status
	
Run Jenkins server
	sudo service jenkins start or sudo systemctl start jenkins
	
	sudo systemctl status jenkins

where you will be prompted to provide an initial password to unlock Jenkins.

Follow up the screen instructions and in the terminal, type below:
	sudo cat /var/lib/jenkins/secrets/initialAdminPassword
	
https://github.com/narendra45/devopslearnings.git
	
Installation steps in Redhat linux
	2  sudo yum install wget
    3  sudo yum upgrade
    4  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
    5  sudo cat /etc/yum.repos.d/jenkins.repo
    6  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
    7  sudo yum upgrade
    8  sudo yum install fontconfig java-17-openjdk
    9  sudo yum install jenkins -y
   10  sudo systemctl daemon-reload
   11  sudo systemctl enable jenkins
   12  sudo systemctl start jenkins
   13  sudo systemctl status jenkins
   14  sudo cat /var/lib/jenkins/secrets/initialAdminPassword
   15  sudo yum  install git
   16  history
   
   
   
   
   
   
  pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    environment{
        DEPLOY_TO =  'production'
        GREETING = 'Good Morning'
    }
    stages {
        stage('Build') {
            steps {
                sh 'echo This is build'
                sh 'env'
            }
        }
        stage('Test') {
            steps {
                sh 'echo This is Test'
            }
        }
        stage('Deploy') {
            steps {
                sh 'echo This is Deploy'
            }
        }
        stage("print params"){
            steps{
                echo "Hello ${params.PERSON}"
                echo "Biography: ${params.BIOGRAPHY}"
                echo "Toggle: ${params.TOGGLE}"
                echo "Choice: ${params.CHOICE}"
                echo "Password: ${params.PASSWORD}"
                echo "triggered test again"
                error 'some failure'
            }
        }
    }
    post { 
        always { 
            echo 'I will always say Hello again!'
        }
        success { 
            echo 'I will run when pipeline is success'
        }
        failure { 
            echo 'I will run when pipeline is failure'
        }
    }
}


1. Free style Project:
    create Project:
        Go To Dash Boards --> new item-->enter an item name[....] --> select Freestyle project --> click ok
    Configure the project:
        Go To Dash Boards --> click on item name(Hello world) --> configure --> type description [....]-->goto Build Steps --> click on Add build step --> select Execute shell --> write command [...] --> Apply --> Save
    Execute the project:
        Go To Dash Boards --> click on item name(Hello world) --> click on Build Now
    
    Disadvantages:
        1. anyone can login and do the changes, difficult to track what went wrong
        2. difficult to restore
        3. we can't see the history.

2. Scripted Way:
    a. review can be done before do omething.
    b. easy to restore.
    c. track the changes.
    d. maintai the history.

2.1 pipeline script:
    create Project:
        Go To Dash Boards--> new item-->enter an item name[....] --> select Pipeline --> click ok
    Configure the project:
        Go To Dash Boards --> click on item name(Hello world) --> configure --> type description [....]-->goto Pipeline --> select Pipeline script --> Script? select Hello World or write you sample script --> Apply --> Save

        sample helo world script:
            pipeline {
                agent any

                stages {
                    stage('Hello') {
                        steps {
                            echo 'Hello World'
                        }
                    }
                }
            }
        
    Execute the project:
        Go To Dash Boards --> click on item name(Hello world) --> click on Build Now

2.2 Pipeline script from SCM:
    create Project:
        Go To Dash Boards--> new item-->enter an item name[....] --> select Pipeline --> click ok
    Configure the project:
        Go To Dash Boards --> click on item name(Hello world) --> configure --> type description [....]-->goto Pipeline --> select Pipeline script from SCM --> SCM? select git -->Repository URL? give git url https://github.com/narendra45/learn-jenkins.git -->Branches to build? Branch Specifier (blank for 'any')? type */main --> Apply --> Save
    Execute the project:

        Go To Dash Boards --> click on item name(Hello world) --> click on Build Now
    
        Output: Dashboard --> jenkins-test3 -->Build History --> select bild (#4) --> Console Output
            Started by user admin
            Obtained jenkinsfile from git https://github.com/narendra45/learn-jenkins.git
            [Pipeline] Start of Pipeline
            [Pipeline] node
            Running on Jenkins in /var/lib/jenkins/workspace/jenkins-test3@2
            [Pipeline] {
            [Pipeline] stage
            [Pipeline] { (Declarative: Checkout SCM)
            [Pipeline] checkout
            Selected Git installation does not exist. Using Default
            The recommended git tool is: NONE
            No credentials specified
            Cloning the remote Git repository
            Cloning repository https://github.com/narendra45/learn-jenkins.git
            > git init /var/lib/jenkins/workspace/jenkins-test3@2 # timeout=10
            Fetching upstream changes from https://github.com/narendra45/learn-jenkins.git
            > git --version # timeout=10
            > git --version # 'git version 2.43.5'
            > git fetch --tags --force --progress -- https://github.com/narendra45/learn-jenkins.git +refs/heads/*:refs/remotes/origin/* # timeout=10
            > git config remote.origin.url https://github.com/narendra45/learn-jenkins.git # timeout=10
            > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
            Avoid second fetch
            > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
            Checking out Revision f816736a3c9fcd8cf4925992baae9f7a4f1431f0 (refs/remotes/origin/main)
            > git config core.sparsecheckout # timeout=10
            > git checkout -f f816736a3c9fcd8cf4925992baae9f7a4f1431f0 # timeout=10
            Commit message: "adding jenkinsfile"
            > git rev-list --no-walk f816736a3c9fcd8cf4925992baae9f7a4f1431f0 # timeout=10
            [Pipeline] }
            [Pipeline] // stage
            [Pipeline] withEnv
            [Pipeline] {
            [Pipeline] stage
            [Pipeline] { (Build)
            [Pipeline] sh
            + echo this is Build
            this is Build
            [Pipeline] }
            [Pipeline] // stage
            [Pipeline] stage
            [Pipeline] { (Test)
            [Pipeline] sh
            + echo this is Test
            this is Test
            [Pipeline] }
            [Pipeline] // stage
            [Pipeline] stage
            [Pipeline] { (Deploy)
            [Pipeline] sh
            + echo this is Deploy
            this is Deploy
            [Pipeline] }
            [Pipeline] // stage
            [Pipeline] }
            [Pipeline] // withEnv
            [Pipeline] }
            [Pipeline] // node
            [Pipeline] End of Pipeline
            Finished: SUCCESS

2.3 Agent node
    master and node architecture.
        1. when work is there, master calls agent and ask them to do work --> Push based architecture
        2. Daily agent comes to master and ask if there is any work.--> Pull based architecture

    create node Using Username and Password:
        a. Go To Dash Boards-->Manage Jenkins-->Nodes-->New node-->Node name (give any node name) --> select Permanent Agent --> Click on Create -->Description? [....] --> Number of executors? [give number (3)] -->Remote root directory? /home/ec2-user/jenkins-agent --> Labels?[ any name (AGENT-1)] --> Usage? [Only build jobs with label expressions matching this node] -->Launch method? [Launch agents via SSH] --> Host? [Give Master IP Address] --> 
        Credentials( ssh-auth) if only None in list click on +Add {-->Add Credentials--> Domain[Global credentials (unrestricted)] --> Kind [Username with password]-->Scope? [Global (Jenkins, nodes, items, all child items, etc)] --> Username?[Master server user name(ec2-user)] --> select Treat username as secret? --> Password? [Master server user password (DevOps321)] --> ID? [give any Id (ssh-auth)] --> click on add } -->
        Host Key Verification Strategy? [Non verifying Verification Strategy]--> Availability? [Keep this agent online as much as possible] --> click on save
    create node Using keys:
        https://www.jenkins.io/doc/book/using/using-agents/

2.4 web hook:
    https://www.blazemeter.com/blog/how-to-integrate-your-github-repository-to-your-jenkins-project

    


http://ip:8080/github-webhook/